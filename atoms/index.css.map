{"mappings":"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","sources":["node_modules/tailwindcss/lib/lib/substituteClassApplyAtRules.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = substituteClassApplyAtRules;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _didyoumean = _interopRequireDefault(require(\"didyoumean\"));\n\nvar _substituteTailwindAtRules = _interopRequireDefault(require(\"./substituteTailwindAtRules\"));\n\nvar _evaluateTailwindFunctions = _interopRequireDefault(require(\"./evaluateTailwindFunctions\"));\n\nvar _substituteVariantsAtRules = _interopRequireDefault(require(\"./substituteVariantsAtRules\"));\n\nvar _substituteResponsiveAtRules = _interopRequireDefault(require(\"./substituteResponsiveAtRules\"));\n\nvar _convertLayerAtRulesToControlComments = _interopRequireDefault(require(\"./convertLayerAtRulesToControlComments\"));\n\nvar _substituteScreenAtRules = _interopRequireDefault(require(\"./substituteScreenAtRules\"));\n\nvar _prefixSelector = _interopRequireDefault(require(\"../util/prefixSelector\"));\n\nvar _useMemo = require(\"../util/useMemo\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction hasAtRule(css, atRule, condition) {\n  let found = false;\n  css.walkAtRules(atRule, condition === undefined ? () => {\n    found = true;\n    return false;\n  } : node => {\n    if (condition(node)) {\n      found = true;\n      return false;\n    }\n  });\n  return found;\n}\n\nfunction cloneWithoutChildren(node) {\n  if (node.type === 'atrule') {\n    return _postcss.default.atRule({\n      name: node.name,\n      params: node.params\n    });\n  }\n\n  if (node.type === 'rule') {\n    return _postcss.default.rule({\n      name: node.name,\n      selectors: node.selectors\n    });\n  }\n\n  const clone = node.clone();\n  clone.removeAll();\n  return clone;\n}\n\nconst tailwindApplyPlaceholder = _postcssSelectorParser.default.attribute({\n  attribute: '__TAILWIND-APPLY-PLACEHOLDER__'\n});\n\nfunction generateRulesFromApply({\n  rule,\n  utilityName: className,\n  classPosition\n}, replaceWiths) {\n  const parser = (0, _postcssSelectorParser.default)(selectors => {\n    let i = 0;\n    selectors.walkClasses(c => {\n      if (classPosition === i++ && c.value === className) {\n        c.replaceWith(tailwindApplyPlaceholder);\n      }\n    });\n  });\n\n  const processedSelectors = _lodash.default.flatMap(rule.selectors, selector => {\n    // You could argue we should make this replacement at the AST level, but if we believe\n    // the placeholder string is safe from collisions then it is safe to do this is a simple\n    // string replacement, and much, much faster.\n    return replaceWiths.map(replaceWith => parser.processSync(selector).replace('[__TAILWIND-APPLY-PLACEHOLDER__]', replaceWith));\n  });\n\n  const cloned = rule.clone();\n  let current = cloned;\n  let parent = rule.parent;\n\n  while (parent && parent.type !== 'root') {\n    const parentClone = cloneWithoutChildren(parent);\n    parentClone.append(current);\n    current.parent = parentClone;\n    current = parentClone;\n    parent = parent.parent;\n  }\n\n  cloned.selectors = processedSelectors;\n  return current;\n}\n\nconst extractUtilityNamesParser = (0, _postcssSelectorParser.default)(selectors => {\n  let classes = [];\n  selectors.walkClasses(c => classes.push(c.value));\n  return classes;\n});\nconst extractUtilityNames = (0, _useMemo.useMemo)(selector => extractUtilityNamesParser.transformSync(selector), selector => selector);\nconst cloneRuleWithParent = (0, _useMemo.useMemo)(rule => rule.clone({\n  parent: rule.parent\n}), rule => rule);\n\nfunction buildCssUtilityMap(css, startIndex) {\n  let index = startIndex;\n  const utilityMap = {};\n\n  function handle(getRule, rule) {\n    const utilityNames = extractUtilityNames(rule.selector);\n    utilityNames.forEach((utilityName, i) => {\n      if (utilityMap[utilityName] === undefined) {\n        utilityMap[utilityName] = [];\n      }\n\n      utilityMap[utilityName].push({\n        index,\n        utilityName,\n        classPosition: i,\n        ...getRule(rule)\n      });\n      index++;\n    });\n  } // This is the end user's css. This might contain rules that we want to\n  // apply. We want immediate copies of everything in case that we have user\n  // defined classes that are recursively applied. Down below we are modifying\n  // the rules directly. We could do a better solution where we keep track of a\n  // dependency tree, but that is a bit more complex. Might revisit later,\n  // we'll see how this turns out!\n\n\n  css.walkRules(handle.bind(null, rule => ({\n    rule: cloneRuleWithParent(rule)\n  })));\n  return utilityMap;\n}\n\nconst buildLookupTreeUtilityMap = (0, _useMemo.useMemo)(lookupTree => {\n  let index = 0;\n  const utilityMap = {};\n\n  function handle(getRule, rule) {\n    const utilityNames = extractUtilityNames(rule.selector);\n    utilityNames.forEach((utilityName, i) => {\n      if (utilityMap[utilityName] === undefined) {\n        utilityMap[utilityName] = [];\n      }\n\n      utilityMap[utilityName].push({\n        index,\n        utilityName,\n        classPosition: i,\n        ...getRule(rule)\n      });\n      index++;\n    });\n  } // Lookup tree is the big lookup tree, making the rule lazy allows us to save\n  // some memory because we don't need everything.\n\n\n  lookupTree.walkRules(handle.bind(null, rule => ({\n    get rule() {\n      return cloneRuleWithParent(rule);\n    }\n\n  })));\n  return utilityMap;\n}, tree => tree);\n\nfunction mergeAdjacentRules(initialRule, rulesToInsert) {\n  let previousRule = initialRule;\n  rulesToInsert.forEach(toInsert => {\n    if (toInsert.type === 'rule' && previousRule.type === 'rule' && toInsert.selector === previousRule.selector) {\n      previousRule.append(toInsert.nodes);\n    } else if (toInsert.type === 'atrule' && previousRule.type === 'atrule' && toInsert.params === previousRule.params) {\n      const merged = mergeAdjacentRules(previousRule.nodes[previousRule.nodes.length - 1], toInsert.nodes);\n      previousRule.append(merged);\n    } else {\n      previousRule = toInsert;\n    }\n\n    toInsert.walk(n => {\n      if (n.nodes && n.nodes.length === 0) {\n        n.remove();\n      }\n    });\n  });\n  return rulesToInsert.filter(r => r.nodes.length > 0);\n}\n\nfunction makeExtractUtilityRules(css, lookupTree, config) {\n  const lookupTreeUtilityMap = buildLookupTreeUtilityMap(lookupTree);\n  const lookupTreeUtilityMapKeys = Object.keys(lookupTreeUtilityMap);\n  const utilityMap = buildCssUtilityMap(css, lookupTreeUtilityMapKeys.length);\n\n  function getUtility(utilityName) {\n    const utility = [];\n\n    if (lookupTreeUtilityMap[utilityName]) {\n      utility.push(...lookupTreeUtilityMap[utilityName]);\n    }\n\n    if (utilityMap[utilityName]) {\n      utility.push(...utilityMap[utilityName]);\n    }\n\n    if (utility.length > 0) return utility;\n  }\n\n  return function extractUtilityRules(utilityNames, rule) {\n    const combined = [];\n    utilityNames.forEach(utilityName => {\n      const utility = getUtility(utilityName);\n\n      if (utility === undefined) {\n        // Look for prefixed utility in case the user has goofed\n        const prefixedUtilityName = (0, _prefixSelector.default)(config.prefix, `.${utilityName}`).slice(1);\n        const prefixedUtility = getUtility(prefixedUtilityName);\n\n        if (prefixedUtility !== undefined) {\n          throw rule.error(`The \\`${utilityName}\\` class does not exist, but \\`${prefixedUtilityName}\\` does. Did you forget the prefix?`);\n        }\n\n        const suggestedClass = (0, _didyoumean.default)(utilityName, Object.keys(utilityMap).concat(lookupTreeUtilityMapKeys));\n        const suggestionMessage = suggestedClass ? `, but \\`${suggestedClass}\\` does` : '';\n        throw rule.error(`The \\`${utilityName}\\` class does not exist${suggestionMessage}. If you're sure that \\`${utilityName}\\` exists, make sure that any \\`@import\\` statements are being properly processed before Tailwind CSS sees your CSS, as \\`@apply\\` can only be used for classes in the same CSS tree.`, {\n          word: utilityName\n        });\n      }\n\n      combined.push(...utility);\n    });\n    return combined.sort((a, b) => a.index - b.index);\n  };\n}\n\nfunction findParent(rule, predicate) {\n  let parent = rule.parent;\n\n  while (parent) {\n    if (predicate(parent)) {\n      return parent;\n    }\n\n    parent = parent.parent;\n  }\n\n  throw new Error('No parent could be found');\n}\n\nfunction processApplyAtRules(css, lookupTree, config) {\n  const extractUtilityRules = makeExtractUtilityRules(css, lookupTree, config);\n\n  do {\n    css.walkAtRules('apply', applyRule => {\n      const parent = applyRule.parent; // Direct parent\n\n      const nearestParentRule = findParent(applyRule, r => r.type === 'rule');\n      const currentUtilityNames = extractUtilityNames(nearestParentRule.selector);\n\n      const [importantEntries, applyUtilityNames, important = importantEntries.length > 0] = _lodash.default.partition(applyRule.params.split(/[\\s\\t\\n]+/g), n => n === '!important');\n\n      if (_lodash.default.intersection(applyUtilityNames, currentUtilityNames).length > 0) {\n        const currentUtilityName = _lodash.default.intersection(applyUtilityNames, currentUtilityNames)[0];\n\n        throw parent.error(`You cannot \\`@apply\\` the \\`${currentUtilityName}\\` utility here because it creates a circular dependency.`);\n      } // Extract any post-apply declarations and re-insert them after apply rules\n\n\n      const afterRule = parent.clone({\n        raws: {}\n      });\n      afterRule.nodes = afterRule.nodes.slice(parent.index(applyRule) + 1);\n      parent.nodes = parent.nodes.slice(0, parent.index(applyRule) + 1); // Sort applys to match CSS source order\n\n      const applys = extractUtilityRules(applyUtilityNames, applyRule); // Get new rules with the utility portion of the selector replaced with the new selector\n\n      const rulesToInsert = [];\n      applys.forEach(nearestParentRule === parent ? util => rulesToInsert.push(generateRulesFromApply(util, parent.selectors)) : util => util.rule.nodes.forEach(n => afterRule.append(n.clone())));\n      rulesToInsert.forEach(rule => {\n        if (rule.type === 'atrule') {\n          rule.walkRules(rule => {\n            rule.__tailwind = { ...rule.__tailwind,\n              important\n            };\n          });\n        } else {\n          rule.__tailwind = { ...rule.__tailwind,\n            important\n          };\n        }\n      });\n\n      const {\n        nodes\n      } = _lodash.default.tap(_postcss.default.root({\n        nodes: rulesToInsert\n      }), root => {\n        root.walkDecls(d => {\n          d.important = important;\n        });\n      });\n\n      const mergedRules = mergeAdjacentRules(nearestParentRule, [...nodes, afterRule]);\n      applyRule.remove();\n      parent.after(mergedRules); // If the base rule has nothing in it (all applys were pseudo or responsive variants),\n      // remove the rule fuggit.\n\n      if (parent.nodes.length === 0) {\n        parent.remove();\n      }\n    }); // We already know that we have at least 1 @apply rule. Otherwise this\n    // function would not have been called. Therefore we can execute this code\n    // at least once. This also means that in the best case scenario we only\n    // call this 2 times, instead of 3 times.\n    // 1st time -> before we call this function\n    // 2nd time -> when we check if we have to do this loop again (because do {} while (check))\n    // .. instead of\n    // 1st time -> before we call this function\n    // 2nd time -> when we check the first time (because while (check) do {})\n    // 3rd time -> when we re-check to see if we should do this loop again\n  } while (hasAtRule(css, 'apply'));\n\n  return css;\n}\n\nlet defaultTailwindTree = new Map();\n\nfunction substituteClassApplyAtRules(config, getProcessedPlugins, configChanged) {\n  return function (css) {\n    // We can stop already when we don't have any @apply rules. Vue users: you're welcome!\n    if (!hasAtRule(css, 'apply')) {\n      return css;\n    }\n\n    let requiredTailwindAtRules = ['base', 'components', 'utilities'];\n\n    if (hasAtRule(css, 'tailwind', node => {\n      let idx = requiredTailwindAtRules.indexOf(node.params);\n      if (idx !== -1) requiredTailwindAtRules.splice(idx, 1);\n      if (requiredTailwindAtRules.length <= 0) return true;\n      return false;\n    })) {\n      // Tree already contains all the at rules (requiredTailwindAtRules)\n      return processApplyAtRules(css, _postcss.default.root(), config);\n    }\n\n    let lookupKey = requiredTailwindAtRules.join(','); // We mutated the `requiredTailwindAtRules`, but when we hit this point in\n    // time, it means that we don't have all the atrules. The missing atrules\n    // are listed inside the requiredTailwindAtRules, which we can use to fill\n    // in the missing pieces.\n    //\n    // Important for <style> blocks in Vue components.\n\n    const generateLookupTree = configChanged || !defaultTailwindTree.has(lookupKey) ? () => {\n      return (0, _postcss.default)([(0, _substituteTailwindAtRules.default)(config, getProcessedPlugins()), (0, _evaluateTailwindFunctions.default)({\n        tailwindConfig: config\n      }), (0, _substituteVariantsAtRules.default)(config, getProcessedPlugins()), (0, _substituteResponsiveAtRules.default)(config), (0, _convertLayerAtRulesToControlComments.default)(config), (0, _substituteScreenAtRules.default)({\n        tailwindConfig: config\n      })]).process(requiredTailwindAtRules.map(rule => `@tailwind ${rule};`).join('\\n'), {\n        from: __filename\n      }).then(result => {\n        defaultTailwindTree.set(lookupKey, result);\n        return result;\n      });\n    } : () => Promise.resolve(defaultTailwindTree.get(lookupKey));\n    return generateLookupTree().then(result => {\n      return processApplyAtRules(css, result.root, config);\n    });\n  };\n}"],"names":[],"version":3,"file":"index.css.map"}